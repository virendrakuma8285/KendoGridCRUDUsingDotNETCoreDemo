/* tslint:disable:component-selector-name  component-selector-type */
import { Component, ChangeDetectionStrategy, EventEmitter, HostBinding, Input, Output, ViewChild } from '@angular/core';
import { BusViewService } from './services/bus-view.service';
import { DOMService } from './services/dom.service';
import { VirtualizationComponent } from '../virtualization/virtualization.component';
import { MIN_DATE, MAX_DATE } from '../defaults';
import { cloneDate } from '@progress/kendo-date-math';
import { dateInRange } from '../util';
var ITEMS_COUNT = 30;
/**
 * @hidden
 */
var NavigationComponent = (function () {
    function NavigationComponent(bus, dom) {
        this.bus = bus;
        this.dom = dom;
        this.min = new Date(MIN_DATE);
        this.max = new Date(MAX_DATE);
        this.focusedDate = new Date();
        this.valueChange = new EventEmitter();
        this.dates = [];
        this.take = ITEMS_COUNT;
        this.indexToScroll = -1;
    }
    Object.defineProperty(NavigationComponent.prototype, "getComponentClass", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    NavigationComponent.prototype.ngOnInit = function () {
        this.dom.ensureHeights();
        var calendarHeight = this.dom.calendarHeight;
        this.itemHeight = this.dom.navigationItemHeight;
        this.maxViewHeight = this.dom.monthViewHeight;
        this.topOffset = (calendarHeight - this.itemHeight) / 2;
        this.bottomOffset = calendarHeight - this.itemHeight;
    };
    NavigationComponent.prototype.ngOnChanges = function (changes) {
        this.service = this.bus.service(this.activeView);
        if (!this.service) {
            return;
        }
        var viewDate = dateInRange(this.focusedDate, this.min, this.max);
        var total = this.service.total(this.min, this.max);
        var totalChanged = this.total && this.total !== total;
        this.skip = this.service.skip(viewDate, this.min);
        this.total = total;
        if (totalChanged || !this.service.isInArray(viewDate, this.dates)) {
            this.dates = this.service.datesList(viewDate, this.getTake(this.skip));
        }
        if (!!changes.focusedDate || totalChanged) {
            this.indexToScroll = this.service.skip(this.focusedDate, this.min);
        }
    };
    NavigationComponent.prototype.ngAfterViewInit = function () {
        if (this.indexToScroll === -1) {
            return;
        }
        this.virtualization.scrollToIndex(this.indexToScroll);
        this.indexToScroll = -1;
    };
    NavigationComponent.prototype.ngAfterViewChecked = function () {
        if (this.indexToScroll === -1) {
            return;
        }
        this.virtualization.scrollToIndex(this.indexToScroll);
        this.indexToScroll = -1;
    };
    NavigationComponent.prototype.pageChange = function (_a) {
        var skip = _a.skip;
        this.dates = this.service.datesList(this.service.addToDate(this.min, skip), this.getTake(skip));
    };
    NavigationComponent.prototype.scrollChange = function (_a) {
        var offset = _a.offset;
        var translate = "translateY(" + offset + "px)";
        this.style = { transform: translate, '-ms-transform': translate };
    };
    NavigationComponent.prototype.handleDateChange = function (candidate) {
        this.valueChange.emit(cloneDate(candidate));
    };
    NavigationComponent.prototype.getTake = function (skip) {
        return Math.min(this.total - skip, this.take);
    };
    return NavigationComponent;
}());
export { NavigationComponent };
NavigationComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'kendo-calendar-navigation',
                template: "\n    <span class=\"k-calendar-navigation-highlight\"></span>\n    <kendo-virtualization\n        [skip]=\"skip\"\n        [take]=\"take\"\n        [total]=\"total\"\n        [itemHeight]=\"itemHeight\"\n        [topOffset]=\"topOffset\"\n        [bottomOffset]=\"bottomOffset\"\n        [maxScrollDifference]=\"maxViewHeight\"\n        (pageChange)=\"pageChange($event)\"\n        (scrollChange)=\"scrollChange($event)\"\n    >\n        <ul [ngStyle]=\"style\" class=\"k-reset\">\n\n    <li *ngIf=\"dates[0]\" (click)=\"handleDateChange(dates[0])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[0])\">\n            {{service.navigationTitle(dates[0])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[1]\" (click)=\"handleDateChange(dates[1])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[1])\">\n            {{service.navigationTitle(dates[1])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[2]\" (click)=\"handleDateChange(dates[2])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[2])\">\n            {{service.navigationTitle(dates[2])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[3]\" (click)=\"handleDateChange(dates[3])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[3])\">\n            {{service.navigationTitle(dates[3])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[4]\" (click)=\"handleDateChange(dates[4])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[4])\">\n            {{service.navigationTitle(dates[4])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[5]\" (click)=\"handleDateChange(dates[5])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[5])\">\n            {{service.navigationTitle(dates[5])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[6]\" (click)=\"handleDateChange(dates[6])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[6])\">\n            {{service.navigationTitle(dates[6])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[7]\" (click)=\"handleDateChange(dates[7])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[7])\">\n            {{service.navigationTitle(dates[7])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[8]\" (click)=\"handleDateChange(dates[8])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[8])\">\n            {{service.navigationTitle(dates[8])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[9]\" (click)=\"handleDateChange(dates[9])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[9])\">\n            {{service.navigationTitle(dates[9])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[10]\" (click)=\"handleDateChange(dates[10])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[10])\">\n            {{service.navigationTitle(dates[10])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[11]\" (click)=\"handleDateChange(dates[11])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[11])\">\n            {{service.navigationTitle(dates[11])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[12]\" (click)=\"handleDateChange(dates[12])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[12])\">\n            {{service.navigationTitle(dates[12])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[13]\" (click)=\"handleDateChange(dates[13])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[13])\">\n            {{service.navigationTitle(dates[13])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[14]\" (click)=\"handleDateChange(dates[14])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[14])\">\n            {{service.navigationTitle(dates[14])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[15]\" (click)=\"handleDateChange(dates[15])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[15])\">\n            {{service.navigationTitle(dates[15])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[16]\" (click)=\"handleDateChange(dates[16])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[16])\">\n            {{service.navigationTitle(dates[16])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[17]\" (click)=\"handleDateChange(dates[17])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[17])\">\n            {{service.navigationTitle(dates[17])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[18]\" (click)=\"handleDateChange(dates[18])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[18])\">\n            {{service.navigationTitle(dates[18])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[19]\" (click)=\"handleDateChange(dates[19])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[19])\">\n            {{service.navigationTitle(dates[19])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[20]\" (click)=\"handleDateChange(dates[20])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[20])\">\n            {{service.navigationTitle(dates[20])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[21]\" (click)=\"handleDateChange(dates[21])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[21])\">\n            {{service.navigationTitle(dates[21])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[22]\" (click)=\"handleDateChange(dates[22])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[22])\">\n            {{service.navigationTitle(dates[22])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[23]\" (click)=\"handleDateChange(dates[23])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[23])\">\n            {{service.navigationTitle(dates[23])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[24]\" (click)=\"handleDateChange(dates[24])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[24])\">\n            {{service.navigationTitle(dates[24])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[25]\" (click)=\"handleDateChange(dates[25])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[25])\">\n            {{service.navigationTitle(dates[25])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[26]\" (click)=\"handleDateChange(dates[26])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[26])\">\n            {{service.navigationTitle(dates[26])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[27]\" (click)=\"handleDateChange(dates[27])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[27])\">\n            {{service.navigationTitle(dates[27])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[28]\" (click)=\"handleDateChange(dates[28])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[28])\">\n            {{service.navigationTitle(dates[28])}}\n        </span>\n    </li>\n\n    <li *ngIf=\"dates[29]\" (click)=\"handleDateChange(dates[29])\">\n        <span [class.k-calendar-navigation-marker]=\"service.isRangeStart(dates[29])\">\n            {{service.navigationTitle(dates[29])}}\n        </span>\n    </li>\n\n        </ul>\n    </kendo-virtualization>\n  "
            },] },
];
/** @nocollapse */
NavigationComponent.ctorParameters = function () { return [
    { type: BusViewService, },
    { type: DOMService, },
]; };
NavigationComponent.propDecorators = {
    'activeView': [{ type: Input },],
    'min': [{ type: Input },],
    'max': [{ type: Input },],
    'focusedDate': [{ type: Input },],
    'valueChange': [{ type: Output },],
    'virtualization': [{ type: ViewChild, args: [VirtualizationComponent,] },],
    'getComponentClass': [{ type: HostBinding, args: ["class.k-calendar-navigation",] },],
};
