import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, TemplateRef, ViewContainerRef, OnChanges, OnDestroy } from '@angular/core';
import { AbstractControl, ControlValueAccessor } from '@angular/forms';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { PopupService, PopupRef } from '@progress/kendo-angular-popup';
import { DateInputComponent } from '../dateinput/dateinput.component';
import { DateInputFormatPlaceholder } from '../dateinput/models/format-placeholder.model';
import { TimeSelectorComponent } from './timeselector.component';
import { TimePickerIncrementalSteps } from './models/incremental-steps.model';
import { PopupSettings } from '../popup-settings.model';
import { PreventableEvent } from '../preventable-event';
/**
 * Represents the Kendo UI TimePicker component for Angular.
 */
export declare class TimePickerComponent implements ControlValueAccessor, OnChanges, OnDestroy {
    zone: NgZone;
    localization: LocalizationService;
    private cdr;
    private popupService;
    private rtl;
    input: DateInputComponent;
    timeSelector: TimeSelectorComponent;
    container: ViewContainerRef;
    popupTemplate: TemplateRef<any>;
    wrapper: ElementRef;
    /**
     * Sets or gets the `disabled` property of the TimePicker and determines whether the component is active.
     */
    disabled: boolean;
    /**
     * Specifies the time format used to display the input value.
     */
    format: string;
    /**
     * Defines the descriptions of the format sections in the input field.
     *
     * * `'wide'`&mdash;Displays the full description of the format section. For example, turns `MM` into `month`.
     * Retrieved from [CLDR](https://github.com/telerik/kendo-intl/blob/develop/docs/cldr/index.md).
     * * `'narrow'`&mdash;Displays the narrow description of the format section. For example, turns `MM` into `mo.`.
     * Retrieved from [CLDR](https://github.com/telerik/kendo-intl/blob/develop/docs/cldr/index.md).
     * * `'short'`&mdash;Displays the short description of the format section. For example, turns `MM` into `mo.`.
     * Retrieved from [CLDR](https://github.com/telerik/kendo-intl/blob/develop/docs/cldr/index.md).
     * * `'formatPattern'`&mdash;Directly displays the format section. For example, turns `MM` into `MM`.
     * * `[CustomFormatPlaceholder]({% slug api_dateinputs_dateinputcustomformatplaceholder_kendouiforangular %})`&mdash;
     * An object that defines the description of the format sections.
     * For example, `{ day: 'd.', month: 'M.', year: 'y', hour: 'h.' }`.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     * <div class="row example-wrapper" style="min-height: 450px;">
     *  <div class="col-xs-12 col-md-6 example-col">
     *    <p>Full-length format description:</p>
     *    <kendo-timepicker formatPlaceholder="wide"></kendo-timepicker>
     *  </div>
     *
     *  <div class="col-xs-12 col-md-6 example-col">
     *    <p>Narrow-length format description:</p>
     *    <kendo-timepicker formatPlaceholder="narrow"></kendo-timepicker>
     *  </div>
     *
     *  <div class="col-xs-12 col-md-6 example-col">
     *    <p>Short-length format description:</p>
     *    <kendo-timepicker formatPlaceholder="short"></kendo-timepicker>
     *  </div>
     *
     *  <div class="col-xs-12 col-md-6 example-col">
     *    <p>Display defined format:</p>
     *    <kendo-timepicker format="HH:mm:ss" formatPlaceholder="formatPattern"></kendo-timepicker>
     *  </div>
     *
     *  <div class="col-xs-12 col-md-6 example-col">
     *    <p>Custom defined format descriptions</p>
     *    <kendo-timepicker format="HH:mm:ss"
     *      [formatPlaceholder]="{ hour: 'H', minute: 'm', second: 's' }"
     *    ></kendo-timepicker>
     *  </div>
     * </div>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    formatPlaceholder: DateInputFormatPlaceholder;
    /**
     * Specifies the hint the TimePicker displays when its value is `null`.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <kendo-timepicker placeholder="Enter start..."></kendo-timepicker>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    placeholder: string;
    /**
     * Specifies the smallest valid time value.
     */
    min: Date;
    /**
     * Specifies the biggest valid time value.
     */
    max: Date;
    /**
     * Determines whether to display the **Cancel** button in the popup.
     */
    cancelButton: boolean;
    /**
     * Determines whether to display the **Now** button in the popup.
     *
     * > If the current time is out of range or the incremental step is greater than `1`, the **Now** button will be hidden.
     */
    nowButton: boolean;
    /**
     * Configures the incremental steps of the TimePicker.
     *
     * The available options are:
     * - `hour: Number`&mdash;Controls the incremental step of the hour value.
     * - `minute: Number`&mdash;Controls the incremental step of the minute value.
     * - `second: Number`&mdash;Controls the incremental step of the second value.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <kendo-timepicker format="HH:mm:ss" [steps]="steps"></kendo-timepicker>
     * `
     * })
     * class AppComponent {
     *   public steps = { hour: 2, minute: 15, second: 15 };
     * }
     * ```
     *
     * > If the incremental step is greater than `1`, the **Now** button will be hidden.
     */
    steps: TimePickerIncrementalSteps;
    /**
     * Configures the popup of the TimePicker.
     *
     * The available options are:
     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     */
    popupSettings: PopupSettings;
    /**
     * Sets or gets the `tabIndex` property of the TimePicker.
     */
    tabIndex: number;
    /**
     * Sets the title of the input element of the TimePicker.
     */
    title: string;
    /**
     * Determines whether the built-in min or max validators are enforced when a form is being validated.
     */
    rangeValidation: boolean;
    /**
     * Specifies the value of the TimePicker component.
     */
    value: Date;
    /**
     * Fires each time the user selects a new value.
     */
    valueChange: EventEmitter<Date>;
    /**
     * Fires each time the user focuses the input element.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <kendo-timepicker (focus)="handleFocus()"></kendo-timepicker>
     * `
     * })
     * class AppComponent {
     *   public handleFocus(): void {
     *      console.log("Component is focused");
     *   }
     * }
     * ```
     *
     * > To wire the event programmatically, use the `onFocus` property.
     */
    onFocus: EventEmitter<any>;
    /**
     * Fires each time the input element gets blurred.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <kendo-timepicker (blur)="handleBlur()"></kendo-timepicker>
     * `
     * })
     * class AppComponent {
     *   public handleBlur(): void {
     *      console.log("Component is blurred");
     *   }
     * }
     * ```
     *
     * > To wire the event programmatically, use the `onBlur` property.
     */
    onBlur: EventEmitter<any>;
    /**
     * Fires each time the popup is about to open.
     * This event is preventable. If you cancel the event, the popup will remain closed.
     */
    open: EventEmitter<PreventableEvent>;
    /**
     * Fires each time the popup is about to close.
     * This event is preventable. If you cancel the event, the popup will remain open.
     */
    close: EventEmitter<PreventableEvent>;
    isActive: boolean;
    popupUID: string;
    popupRef: PopupRef;
    show: boolean;
    private onChange;
    private onTouched;
    private resolvedPromise;
    private timeRangeValidateFn;
    private _min;
    private _max;
    private _popupSettings;
    private _show;
    private _steps;
    /**
     * @hidden
     */
    wrapperClasses(): boolean;
    /**
     * @hidden
     */
    readonly disabledClass: boolean;
    /**
     * @hidden
     */
    handleKeydown(event: any): void;
    constructor(zone: NgZone, localization: LocalizationService, cdr: ChangeDetectorRef, popupService: PopupService, rtl: boolean);
    /**
     * @hidden
     */
    ngOnChanges(changes: any): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    writeValue(value: Date): void;
    /**
     * @hidden
     */
    registerOnChange(fn: any): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: any): void;
    /**
     * @hidden
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * @hidden
     */
    validate(control: AbstractControl): {
        [key: string]: any;
    };
    /**
     * Focuses the TimePicker component.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="timepicker.focus()">Focus time picker</button>
     *  <kendo-timepicker #timepicker></kendo-timepicker>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    focus(): void;
    /**
     * Blurs the TimePicker component.
     */
    blur(): void;
    /**
     * Toggles the visibility of the popup. If you use the `toggle` method to show or hide the popup,
     * the `open` and `close` events do not fire.
     *
     * @param show - The state of the popup.
     */
    toggle(show?: boolean): void;
    /**
     * Returns the current open state of the popup.
     */
    readonly isOpen: boolean;
    /**
     * @hidden
     */
    readonly appendTo: ViewContainerRef;
    /**
     * @hidden
     */
    handleChange(value: Date): void;
    /**
     * @hidden
     */
    handleFocus(): void;
    /**
     * @hidden
     */
    handleBlur(): void;
    /**
     * @hidden
     */
    handleIconClick(): void;
    /**
     * @hidden
     */
    readonly popupClasses: string[];
    /**
     * @hidden
     */
    normalizeTime(date: Date): Date;
    private _toggle(show);
    private hasActiveComponent();
    private nextTick(f);
}
