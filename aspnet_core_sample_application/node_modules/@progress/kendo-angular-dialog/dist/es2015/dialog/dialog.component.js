import { Component, ContentChild, EventEmitter, HostBinding, Inject, Input, ViewChild, Optional, Output, ElementRef, Renderer2 } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { RTL } from '@progress/kendo-angular-l10n';
import { DialogActionsComponent } from './dialog-actions.component';
import { DialogTitleBarComponent } from './dialog-titlebar.component';
/**
 * Represents the Kendo UI Dialog component for Angular.
 */
export class DialogComponent {
    constructor(_elRef, _renderer, rtl) {
        this._elRef = _elRef;
        this._renderer = _renderer;
        /**
         * Fires when the user clicks on the **Close** button of the Dialog.
         */
        this.action = new EventEmitter();
        /**
         * Fires when the user clicks on the **Close** button of the Dialog.
         */
        this.close = new EventEmitter();
        this.subscriptions = [];
        this.direction = rtl ? 'rtl' : 'ltr';
    }
    get dir() {
        return this.direction;
    }
    ngAfterContentInit() {
        this.bubble('close', this.titlebarContent);
    }
    ngAfterViewInit() {
        this.bubble('close', this.titlebarView);
        this.bubble('action', this.actionsView);
    }
    ngOnInit() {
        this._renderer.removeAttribute(this._elRef.nativeElement, 'title');
    }
    ngOnDestroy() {
        this.subscriptions.forEach(s => s.unsubscribe());
        this.subscriptions = [];
    }
    get wrapperClass() {
        return true;
    }
    get styles() {
        const styles = {};
        if (this.width) {
            styles.width = this.width + 'px';
        }
        if (this.height) {
            styles.height = this.height + 'px';
        }
        if (this.minWidth) {
            styles.minWidth = this.minWidth + 'px';
        }
        return styles;
    }
    bubble(eventName, component) {
        if (component) {
            const emit = e => this[eventName].emit(e);
            const s = component[eventName].subscribe(emit);
            this.subscriptions.push(s);
        }
    }
}
DialogComponent.decorators = [
    { type: Component, args: [{
                animations: [
                    trigger('overlayAppear', [
                        state('in', style({ opacity: 1 })),
                        transition('void => *', [
                            style({ opacity: .1 }),
                            animate('.3s cubic-bezier(.2, .6, .4, 1)')
                        ])
                    ]),
                    trigger('dialogSlideInAppear', [
                        state('in', style({ transform: 'translate(0, 0)' })),
                        transition('void => *', [
                            style({ transform: 'translate(0, -10%)' }),
                            animate('.3s cubic-bezier(.2, 1, .2, 1)')
                        ])
                    ])
                ],
                exportAs: 'kendoDialog',
                selector: 'kendo-dialog',
                template: `
    <div class="k-overlay" @overlayAppear></div>

    <div class="k-widget k-window k-dialog" [ngStyle]="styles" @dialogSlideInAppear>

      <kendo-dialog-titlebar *ngIf="title">{{title}}</kendo-dialog-titlebar>
      <ng-content select="kendo-dialog-titlebar" *ngIf="!title"></ng-content>

      <div class="k-content k-window-content k-dialog-content">
        <ng-content *ngIf="!contentTemplate"></ng-content>
        <ng-template [ngTemplateOutlet]="contentTemplate" *ngIf="contentTemplate"></ng-template>
      </div>

      <ng-content select="kendo-dialog-actions" *ngIf="!actions"></ng-content>
      <kendo-dialog-actions [actions]="actions" *ngIf="actions"></kendo-dialog-actions>

    </div>
  `
            },] },
];
/** @nocollapse */
DialogComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] },] },
];
DialogComponent.propDecorators = {
    'title': [{ type: Input },],
    'actions': [{ type: Input },],
    'width': [{ type: Input },],
    'minWidth': [{ type: Input },],
    'height': [{ type: Input },],
    'action': [{ type: Output },],
    'close': [{ type: Output },],
    'dir': [{ type: HostBinding, args: ['attr.dir',] },],
    'titlebarContent': [{ type: ContentChild, args: [DialogTitleBarComponent,] },],
    'titlebarView': [{ type: ViewChild, args: [DialogTitleBarComponent,] },],
    'actionsView': [{ type: ViewChild, args: [DialogActionsComponent,] },],
    'wrapperClass': [{ type: HostBinding, args: ['class.k-dialog-wrapper',] },],
};
