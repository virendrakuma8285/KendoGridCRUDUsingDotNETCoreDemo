"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var draggable_directive_1 = require("./draggable.directive");
var drag_resize_service_1 = require("./drag-resize.service");
var Subscription_1 = require("rxjs/Subscription");
var of_1 = require("rxjs/observable/of");
var util_1 = require("../common/util");
var WindowTitleBarComponent = /** @class */ (function () {
    function WindowTitleBarComponent(el, service, ngZone) {
        this.el = el;
        this.ngZone = ngZone;
        this.dragSubscription = new Subscription_1.Subscription();
        this.service = service;
    }
    WindowTitleBarComponent.prototype.ngOnInit = function () {
        this.dragDirective = new draggable_directive_1.DraggableDirective(this.el, this.ngZone);
        this.dragDirective.ngOnInit();
        if (this.service.options.draggable) {
            this.subscribeDrag();
        }
    };
    WindowTitleBarComponent.prototype.ngOnDestroy = function () {
        this.dragDirective.ngOnDestroy();
        if (this.dragSubscription) {
            this.unsubscribeDrag();
        }
    };
    /**
     * @hidden
     */
    WindowTitleBarComponent.prototype.subscribeDrag = function () {
        var _this = this;
        this.dragSubscription = of_1.of(this.dragDirective).subscribe(function (titleBar) {
            _this.service.onDrag(titleBar);
        });
    };
    /**
     * @hidden
     */
    WindowTitleBarComponent.prototype.unsubscribeDrag = function () {
        if (this.dragSubscription) {
            this.service.dragSubscription.unsubscribe();
            this.dragSubscription.unsubscribe();
            this.dragSubscription = null;
        }
    };
    Object.defineProperty(WindowTitleBarComponent.prototype, "className", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    WindowTitleBarComponent.prototype.handle = function (ev) {
        var target = ev.target;
        var state = this.service.options.state;
        if (!util_1.hasClasses(target, 'k-icon') && !util_1.isFocusable(target, false) && this.service.options.resizable) {
            if (state === 'default') {
                this.service.maximizeAction();
            }
            else if (state === 'maximized') {
                this.service.restoreAction();
            }
        }
    };
    WindowTitleBarComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'kendo-window-titlebar',
                    template: "\n    <ng-content *ngIf=\"!template\"></ng-content>\n    <ng-template\n      [ngTemplateOutlet]=\"template\"\n      [ngTemplateOutletContext]=\"{'$implicit': service}\" *ngIf=\"template\">\n    </ng-template>\n  "
                },] },
    ];
    /** @nocollapse */
    WindowTitleBarComponent.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: drag_resize_service_1.DragResizeService, },
        { type: core_1.NgZone, },
    ]; };
    WindowTitleBarComponent.propDecorators = {
        'template': [{ type: core_1.Input },],
        'className': [{ type: core_1.HostBinding, args: ['class.k-window-titlebar',] }, { type: core_1.HostBinding, args: ['class.k-dialog-titlebar',] }, { type: core_1.HostBinding, args: ['class.k-header',] },],
        'handle': [{ type: core_1.HostListener, args: ['dblclick', ['$event'],] },],
    };
    return WindowTitleBarComponent;
}());
exports.WindowTitleBarComponent = WindowTitleBarComponent;
