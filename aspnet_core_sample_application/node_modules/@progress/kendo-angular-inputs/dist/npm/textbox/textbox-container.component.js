"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var dom_utils_1 = require("../common/dom-utils");
var textbox_directive_1 = require("./textbox.directive");
/**
 * Represents the Kendo UI TextBox component for Angular.
 *
 * Provides floating labels to `input` elements.
 *
 * @example
 * ```ng-template
 * <kendo-textbox-container floatingLabel="First name">
 *   <input kendoTextBox />
 * </kendo-textbox-container>
 * ```
 */
var TextBoxContainerComponent = (function () {
    function TextBoxContainerComponent(elementRef, renderer, changeDetectorRef) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.changeDetectorRef = changeDetectorRef;
        /**
         * @hidden
         */
        this.focused = false;
        /**
         * @hidden
         */
        this.empty = true;
        this._listeners = [];
        this.renderer.removeAttribute(this.elementRef.nativeElement, "id");
    }
    Object.defineProperty(TextBoxContainerComponent.prototype, "hostClasses", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxContainerComponent.prototype, "focusedClass", {
        get: function () {
            return this.focused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxContainerComponent.prototype, "emptyClass", {
        get: function () {
            return this.empty;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    TextBoxContainerComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (!this.textbox) {
            return;
        }
        var input = this.textbox.nativeElement;
        this.renderer.addClass(input, "k-textbox-no-border");
        this.empty = !input.value;
        this.listen(input, 'focus', function () { return _this.focused = true; });
        this.listen(input, 'blur', function () { return _this.focused = false; });
        this.listen(input, 'input', function (e) { return _this.empty = !e.srcElement.value; });
        if (this.id && input.id) {
            // input wins
            this.id = input.id;
        }
        else if (this.id) {
            input.id = this.id;
        }
        else if (input.id) {
            this.id = input.id;
        }
        else {
            var id = "_" + dom_utils_1.guid();
            input.id = id;
            this.id = id;
        }
    };
    /**
     * @hidden
     */
    TextBoxContainerComponent.prototype.ngOnDestroy = function () {
        this._listeners.forEach(function (listener) { return listener(); });
        this._listeners = [];
    };
    /**
     * @hidden
     */
    TextBoxContainerComponent.prototype.listen = function (element, eventName, handler) {
        var _this = this;
        var listener = this.renderer.listen(element, eventName, function (e) {
            handler(e);
            _this.changeDetectorRef.markForCheck();
        });
        this._listeners.push(listener);
    };
    return TextBoxContainerComponent;
}());
TextBoxContainerComponent.decorators = [
    { type: core_1.Component, args: [{
                selector: 'kendo-textbox-container',
                template: "\n    <ng-content></ng-content>\n    <label *ngIf=\"floatingLabel\" [for]=\"id\" class=\"k-label\">{{ floatingLabel }}</label>\n  "
            },] },
];
/** @nocollapse */
TextBoxContainerComponent.ctorParameters = function () { return [
    { type: core_1.ElementRef, },
    { type: core_1.Renderer2, },
    { type: core_1.ChangeDetectorRef, },
]; };
TextBoxContainerComponent.propDecorators = {
    'hostClasses': [{ type: core_1.HostBinding, args: ['class.k-textbox-container',] },],
    'focusedClass': [{ type: core_1.HostBinding, args: ['class.k-state-focused',] },],
    'emptyClass': [{ type: core_1.HostBinding, args: ['class.k-state-empty',] },],
    'id': [{ type: core_1.Input },],
    'floatingLabel': [{ type: core_1.Input },],
    'textbox': [{ type: core_1.ContentChild, args: [textbox_directive_1.TextBoxDirective, { read: core_1.ElementRef },] },],
};
exports.TextBoxContainerComponent = TextBoxContainerComponent;
